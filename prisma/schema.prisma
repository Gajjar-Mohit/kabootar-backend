// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "cockroachdb"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  name                  String
  email                 String?                @unique
  phone                 String?
  profileUrl            String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  publickey             String                 @unique
  
  // Separate relation fields for sent and received messages
  sentMessages          Message[]              @relation("SentMessages")
  receivedMessages      Message[]              @relation("ReceivedMessages")
  
  // Many-to-many relationship with conversations through participants
  conversationUsers     ConversationUser[]
  
  @@map("users")
}

model Message {
  id             String       @id @default(uuid())
  text           String
  senderId       String
  recipientId    String?      // Made optional for group conversations
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversationId String
  
  // Relations with proper naming to avoid conflicts
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipient      User?        @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  
  // Indexes for better query performance
  @@index([conversationId])
  @@index([senderId])
  @@index([recipientId])
  @@index([createdAt])
  @@map("messages")
}

model Conversation {
  id                String                 @id @default(uuid())
  name              String?
  type              ConversationType       @default(DIRECT) // DIRECT or GROUP
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  
  messages          Message[]
  conversationUsers ConversationUser[]
  
  @@map("conversations")
}

// Junction table for many-to-many relationship between Users and Conversations
model ConversationUser {
  id             String       @id @default(uuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  role           UserRole     @default(MEMBER) // ADMIN or MEMBER
  
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  // Ensure a user can only be added once per conversation
  @@unique([userId, conversationId])
  @@index([conversationId])
  @@index([userId])
  @@map("conversation_users")
}

// Enums for better type safety
enum ConversationType {
  DIRECT
  GROUP
}

enum UserRole {
  ADMIN
  MEMBER
}